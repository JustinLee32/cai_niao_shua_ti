class Solution:
    def balancedString(self, s: str) -> int:
        self.cache_count = [0, 0, 0, 0]
        self.cache_dict = {"Q": 0, "W": 1, "E": 2, "R": 3}
        self.ans = len(s)
        left = 0
        right = len(s) - 1
        self.max_num = len(s) // 4
        self.cache = [[-1 for _ in range(len(s))] for _ in range(len(s))]

        def _recursion(s, left, right):
            if left > right:
                self.ans = 0
                return
            if self.cache[left][right] >= 0:
                self.ans = min(self.ans, self.cache[left][right])
                return
            self.cache_count[self.cache_dict[s[left]]] += 1
            if self.cache_count[self.cache_dict[s[left]]] <= self.max_num:
                _recursion(s, left + 1, right)
                self.cache[left][right] = right - left
                self.ans = min(self.ans, right - left)
            self.cache_count[self.cache_dict[s[left]]] -= 1
            self.cache_count[self.cache_dict[s[right]]] += 1
            if self.cache_count[self.cache_dict[s[right]]] <= self.max_num:
                _recursion(s, left, right - 1)
                self.cache[left][right] = right - left
                self.ans = min(self.ans, right - left)
            self.cache_count[self.cache_dict[s[right]]] -= 1
            return

        _recursion(s, left, right)
        return self.ans


if __name__ == '__main__':
    s = "QERERQEWRRQQEWREWQERQEWQEQRQQERREWEEQQQWWEQEEEWQEQEQERWQQERERQRERQWEQEQEQEQEWEREQRQQRRQRRWWQEWQWQQEWEWRQRREEREREQQQEREWRRRWEWEQWEEQEWRQRRQWQRWRREWEQWRRQREWEEWWERQWQQWERWWEWEEQREQEWQERRQQRQQWQRERQREEWWQWRRERRQEERREEQRERRQRERRQRERQRQRRRQEQRQQREEWRQWRRQREQQRRQWEQRQRRQWQRWEQWWWEWRRRRRERWQQQWQWREREEWWREWEEQWREWEQWRWQRWQWWQWEEWEQWRWQWQRWQWEWRRWERQEQWWQWWWRQRRREWRQEQERWEQRQQRERWWWWRQRQREWEEQQEERQEQQRRWWQRWWREERWRWQERWEQEWWERRWWEQWQEWRQRRQEREEQQWQRREWQWQERREQQQWEWRQRWRQRRRRWRQREWWEQQEQWREWRWQQWREWRWRQREWWWWWWWEERRQQEQWREEWWWERWEWWRRWRQQWWREWQRRRWEQQWQRQWWQEQWREEQQQWEWRQQEQREQEWQWWWWQWEQEEEQRRREEWWEWQQRERQQQWQWQQQQWWREWQWRWEWWQRQEQWWWERRERWWEWWERWEWQQQQQRRWQEQERQWRWWEREEWQRQQQQRWEQQEQEEEQEWWWWQRREWWEWEWERWWREWWRQQEEQEWRWEWQRWQWRERRREWREERWQWWEQQQWWQRERWQRQQRQWQEWQEWERREQQEERRWWRWWEQQRQWWWWRREERRWRQWREWQRRRWRREQEEREWREQRRQQRQERERRRWQQRRWEQEREQEWWWREREQWWRRQRQRQWEQWQRRWWEQWEEEEQQREQRQQRWERQWQQWQWQQRWERQQQRQWRRWWWQWRWWWRQEWQEERQWEEWRRQEWQWEWWQEQEEEEWQRWEERQRWWQRQEQWWWRQWWREWQRRREREWEWEQWQERRQWRWRWQEEQWRERRWERQEEWQWWQQERWRQWQRRQEWEEERWQQREWWEREREEWEEEWEEEQQRQEEEQWWWWEWEWEQRQRERRWWEQQWEQWEWQQRRREQWEREQEREQERWWREREERQEWERQRRERWEREEQQQQRWEQWEEWRQEEWRWERWREWEWWRWRERWWWREQRWRWRWWWRWRERQRWRWRWQQEQEWRWWWQQEQQEEEWEEWREEWRQRQWWQEWRRWEQQQRWQRQEQEEEWWWQWEWEWQWWWEWRWERQQEEWRREWQQQWEWEQQRWRQRWWRERRQRWQQRWQREREEWWRQWEERWWQRRRWRRERQEWREEERRQQRRWREEQERQQWEEEEWWWWREERRWEEQRREWRERQEWRWEQQEWEEWWREQQQWWRWWQWQEWQERRRRERQWEWWWRWWREWQWWRWQRRWWWWQREQQRQWQWEQEEREEEQRQEEWQEQEQQRQEEWWEEEEWRWEEWQRQWREWWRQQWQWREWRWWQWRRERWEWQQRQQWWRQQRQWQWQWRRQWQEEWWEERWQWRRQREWQQREREQEWRREERWERWQEQEQWQQEQQEWWWWWWRQREEEEWQWQERQWRRWWRQQEEWREWRQRWEEREQEEERWEWEWWWRRREQEWEEQQEQWQRWREEWERRRRWQRWWWERQEQQQEERERQERRQWQWWQEWEQEQERREWRRWRWEQREEQWWRRRERRQERWQWRQWEWRREQWQQQREEQEWWEEQWQEQRQWWWWQQRQWWEWQQEEERRRQQWREWEQRRQWEEQEQEERWEEEWERRQWQRREWEQEQRQQREEWWEQEQWQEQWEREQWRWEWRRWEQERWWWREWWEQWRWWEEQQRRRRWEWQWQWREQWQWRQEEWRWWWQWRRRQRWEEQRQWWEQRWRWQEQWWEQWWRQRRRWEEQWQQEWWEQWRWEWEEWWEQRRRWRWQQEQEEEWERWWWWWWQQWEQEQQEWEWRWWQWEQERREQQWREWQEQRQRE"
    sol = Solution()
    print(sol.balancedString(s))
