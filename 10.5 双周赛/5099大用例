"cabcabbbbaddddacdaaabdabaaddcdcadcbbaddddacacbcbcdbacadccbbabbbbbdccbbcddcbcbcccbccbadbdcddbbdcbbccbcddcbacacdabcdcccadadacddcbcddbcbadbdddbbbacbddccddcbaadaadadddaccaddabcbaabdbcdaadbcbdacdadbbdbaabaaaabdaadbadbbdcb"
216

"fcgihcgeadfehgiabegbiahbeadbiafgcfchbcacedbificicihibaeehbffeidiaiighceegbfdggggcfaiibefbgeegbcgeadcfdfegfghebcfceiabiagehhibiheddbcgdebdcfegaiahibcfhheggbheebfdahgcfcahafecfehgcgdabbghddeadecidicchfgicbdbecibddfcgbiadiffcifiggigdeedbiiihfgehhdegcaffaggiidiifgfigfiaiicadceefbhicfhbcachacaeiefdcchegfbifhaeafdehicfgbecahidgdagigbhiffhcccdhfdbd"
216


"dbabdadcbbcbacaabbbaaabdbdbcdacdcbadbacacaccdcdbabcabcbcbbcadbbbdadacdbaadaadcbcddbabddbbcacbccbddbcccbaadccddccacacadcbccbbccbdbadccbcbdbcaacbdadbdbbbdccabdbcbadacabbaadabddacaacccbccddcbddcddbddcbabbaccbdcbabbdcdacaddcdabdbbdaaccabdabbbcbbbaccdacccccdbcbaaddddbdabbbddbcbdaddddcabadbccbbaccbdbccacacbbdbdbcbccdddbabdbbadbdcdcbaabcaabdcacdcbb"
216

class Solution:
    def isValidPalindrome(self, s: str, k: int) -> bool:
        self.ans = False
        if len(s) == 1:
            return True
        if len(s) == 2:
            return True if s[0] == s[1] else False
        else:
            def _recursion(s, k, left, right):
                if k < 0:
                    return
                if self.ans:
                    return
                if left >= right:
                    self.ans = True
                    return
                if s[left] == s[right]:
                    _recursion(s, k, left + 1, right - 1)
                elif s[left] != s[right]:
                    _recursion(s, k - 1, left + 1, right)
                    _recursion(s, k - 1, left, right - 1)

            _recursion(s, k, 0, len(s) - 1)
            return self.ans